How did viewing a diff between two versions of a file help you see the bug that
was introduced?

    It pin pointed the areas where the code had changed, so by comparing 
    the differences in not working file with the working file we could 
    easily make out the differences.

How could having easy access to the entire history of a file make you a more
efficient programmer in the long term?

    If things go wrong while updating the code for new features and suddenly 
    bugs from earlier versions creep in, one can always go back to the previous
    versions to cross check and understand the error in a better way.

What do you think are the pros and cons of manually choosing when to create a
commit, like you do in Git, vs having versions automatically saved, like Google
docs does?

    pros:
    	we can know what exactly was changed in each commit.
    	we have the backup of each change in the file, so that we can refer them whenever we want.
    	there is not too much of saving involved, which makes it convenient.

    cons:
    	you don't have each changes you made in the file.
    	any change not commited is lost in the long term.
    	small, not committed changes will not be available in future.


Why do you think some version control systems, like Git, allow saving multiple
files in one commit, while others, like Google Docs, treat each file separately?

    Git is specifically for coding purposes and programmers often have file that are
    interrelated in their specific projects. Hence, its completely logical to save a 
    the entire project when some changes are brought to a specific file of that project.

How can you use the commands git log and git diff to view the history of files?

    git log can be used to see the commit history which has a message displaying
    the changes brought in the project with each commit. The commit ID can be used
    to compare the filesusing git diff, in this way the entire history of the files
    can be traced back.  

How might using version control make you more confident to make changes that
could break something?

    In each commit the current file state get saved in a version control system. Hence, 
    in that case if a program worked earlier and is not working after a commit, one can
    easily checkout the differences in the error file vs working file to find out the 
    real bug.

Now that you have your workspace set up, what do you want to try using Git for?

    Coding various projects, saving my data online for different version